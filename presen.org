#+title: Yet Another Org-mode Presentation Script
#+author: Masataro Asai
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg
#+LINK: spng file:img/static/%s.png
#+LINK: sjpg file:img/static/%s.jpg

#+begin_outline-text-1
#+begin_center
組み合わせ問題をソルバを書かずに +説いてみる+ 解きたい...
#+end_center

#+begin_note
#+begin_alignright
Made by guicho2.71828 (Masataro Asai)
#+end_alignright
#+end_note
#+end_outline-text-1

* 課題

+ 難しい組み合わせ論的/制約充足/最適化問題がたくさんある
  + SAT -- CNF式を充足可能な変数割当は存在するか?
  + IP/LP (整数/線形計画問題) -- 線形不等式を与えられたとき、ある値を最小化する割当を見つけよ
  + CSP -- 高級な制約言語で問題を表現し、制約を満たす変数割当を探す
  + SMT -- CSPと似ている: SATに加えてIP/LPのような不等式も表現可能
  + Prolog
+ これらの問題はおおまかに言って Operations Reseach や 定理証明のサブ分野になっている
+ これらを便利に、 *毎朝コーヒーを沸かすのと同じぐらい簡単に* lisperに自然な形で使えるようにしたい

** SATソルバ

+ 毎年ある *コンペティション* でずんずん性能が上がる
+ SATソルバの専門家/研究者でないとこれに太刀打ちするのは無理!

入力: CNF式 (Conjunctive Normal Form)

例: A ∧ (A ∨ ¬B ∨ C) ∧ D

** IP/LP ソルバ

商業ソルバが とてつもなく早い (Gurobi / ILOG CPLEX)

オープンソースソルバはとても遅い (LP_SOLVEなど)

それでも柔軟に切り替えたい (本番は商業ソルバで…)

minimize   x + y

subject to 0 < x < 3, y + 2x < 5

IP (Integer Programming / 整数計画) は 変数が *整数*, 問題を解くのはNP完全

LP (Linear Programming / 線形計画) は 変数が *実数*, 問題を解くのはP完全

MILP : 一部が整数の問題。

IP の問題を LP の問題として解くと、 IPの最適解の上界 が得られる ← *線形緩和問題*

** CSP (Constraing Satisfaction Problem) ソルバ

SAT と同じくコンペティションがある

Minizinc という高級言語で記述 → *flatzinc* という簡単な言語に変換 → 様々なソルバ

#+begin_center
四色問題
#+end_center

#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
#+begin_src lisp
% Colouring Australia using nc colours
int: nc = 3;
var 1..nc: wa;
var 1..nc: nt;
var 1..nc: sa;
var 1..nc: nsw;
var 1..nc: v;
var 1..nc: t;
var 1..nc: q;
constraint wa != nt;
constraint wa != sa;
constraint nt != sa;
constraint nt != q;
constraint sa != q;
constraint sa != nsw;
constraint sa != v;
constraint q != nsw;
constraint nsw != v;
solve satisfy;
output ["wa=", show(wa), "\t nt=", show(nt),
"\t sa=", show(sa), "\n", "q=", show(q),
"\t nsw=", show(nsw), "\t v=", show(v), "\n",
"t=", show(t), "\n"];
#+end_src
#+end_span6
#+begin_span6

#+end_span6
#+end_row-fluid
#+end_container-fluid
** SMTソルバ

SATソルバと制約ソルバを交互に入れ替えて、制約を満たす解が存在するかを調べる

制約を記述する論理を「Theory」 「Logic」 というかたちで拡張可能

例: QF_LIA = Quantifier Free Linear Integer Arithmetic = SAT + IP みたいな感じ

#+begin_src lisp
(set-option :produce-models true)
(set-logic QF_LIA)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun z () Int)
(assert (and (or
              (<= (+ x 3) (* 2 y))
              (>= (+ x 4) z))))
(check-sat)
(get-model)
#+end_src

** Prolog

いわずもがな、一階述語論理で記述した項を満たす変数割当を列挙



* Lispから便利にこれらの問題を解くには?

例: 4色問題を解きたい

+ Programming OR Approach
  + *Lisp でソルバを書いたら早いし速い!* 自前実装のアプローチ
    + もしかしたら、解きたい問題に対してベストなアルゴリズムを考えられるかもしれない
+ しかし、 *ソルバを書きたくない*
  + 実装時間を減らしたい
  + *コンテストなどで性能のお墨付きがあるソルバで* 解きたい
+ *Modelling OR Approach*
  + 既存の問題を 上記の制約充足/最適化言語に *変換して* (Modelling) 解く
    + SATはNP完全 → 多くの問題はSATのCNF式に変換できる
    + 速いソルバがある

* TRIVIAL-PACKAGE-MANAGER

+ ソルバをインストールするにはたくさん依存関係がある
+ quicklispからapt-get呼べない
+ 呼べばよくね？

#+begin_src lisp
    Package trivial-package-manager (nicknamed as tpm):
    
    browse-package (query-string)
    
    ensure-program (program &key apt dnf yum pacman yaourt brew macports fink choco from-source env-alist)
    ensure-library (library &key apt dnf yum pacman yaourt brew macports fink choco from-source env-alist)
    do-install             (&key apt dnf yum pacman yaourt brew macports fink choco from-source)

      PROGRAM is a program name (string) to be checked by `which` command.
      LIBRARY is a library name (string) to be checked by `pkg-config` command. Includes "lib" i.e. libcurl.
#+end_src

+ gksudo や sudo が適宜選択
+ =<user>/<repo>/<pkg>= で add-apt-repository や brew tap も実行する

** 例

#+begin_src lisp
(defsystem cl-sat.minisat
  :version "0.1"
   ...
  :defsystem-depends-on (:trivial-package-manager)
  :perform
  (load-op :before (op c)
           (uiop:symbol-call :trivial-package-manager
                             :ensure-program
                             "minisat"
                             :apt "minisat"
                             :dnf "minisat2"
                             :yum "minisat2"
                             :brew "minisat"
                             :from-source (format nil "make -C ~a"
                                                  (asdf:system-source-directory :cl-sat.minisat)))))
#+end_src

* SAT -- CL-SAT

#+begin_src lisp
(ql:quickload :cl-sat.minisat)
(solve '(and (or a !b c) d) :minisat)
#+end_src

* DONE SMT -- CL-SMT

#+begin_src lisp
(ql:quickload :cl-smt.cvc4)
(solve '((set-option :produce-models true)
         (set-logic ^QF_LIA)
         (declare-fun x () |Int|)
         (declare-fun y () |Int|)
         (declare-fun z () |Int|)
         (assert (and (or
                       (<= (+ x 3) (* 2 y))
                       (>= (+ x 4) z))))
         (check-sat)
         (get-model))
       :cvc4
       :debug t)
#+end_src

* Prolog -- CL-PROLOG

#+begin_src lisp
(= 6
   (read-from-string
    (print
     (run-prolog `((factorial 0 1)
                   (:- (factorial ?n ?f)
                       (and (> ?n 0)
                            (is ?n1 (- ?n 1))
                            (factorial ?n1 ?f1)
                            (is ?f (* ?n ?f1))))
                   (:- main
                       (factorial 3 ?w)
                       (write_canonical ?w))
                   (:- (initialization main)))
                 :swi))))
#+end_src
